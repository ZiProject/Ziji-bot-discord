const { EmbedBuilder, ApplicationCommandOptionType } = require("discord.js");
const { useHooks } = require("@zibot/zihooks");
const { claimGenshinDaily } = require("../../utils/hoyolab");

module.exports.data = {
	name: "genshin",
	description: "Genshin HoYoLAB daily check-in (bind/claim/auto/status)",
	type: 1,
	options: [
		{
			name: "bind",
			description: "Li√™n k·∫øt cookie HoYoLAB (account_id_v2/ltoken_v2/cookie_token_v2)",
			type: ApplicationCommandOptionType.Subcommand,
			options: [
				{
					name: "account_id_v2",
					description: "account id v2 t·ª´ HoYoLAB",
					type: ApplicationCommandOptionType.String,
					required: true,
				},
				{
					name: "cookie_token_v2",
					description: "Cookie Token v2 t·ª´ HoYoLAB",
					type: ApplicationCommandOptionType.String,
					required: true,
				},
				{
					name: "account_mid_v2",
					description: "Account MID v2 t·ª´ HoYoLAB",
					type: ApplicationCommandOptionType.String,
					required: true,
				},
			],
		},
		{
			name: "claim",
			description: "Nh·∫≠n daily ngay b√¢y gi·ªù",
			type: ApplicationCommandOptionType.Subcommand,
		},
		{
			name: "auto",
			description: "B·∫≠t/t·∫Øt t·ª± ƒë·ªông nh·∫≠n daily m·ªói ng√†y",
			type: ApplicationCommandOptionType.Subcommand,
			options: [
				{
					name: "enabled",
					description: "B·∫≠t (true) ho·∫∑c t·∫Øt (false) auto-claim",
					type: ApplicationCommandOptionType.Boolean,
					required: true,
				},
			],
		},
		{
			name: "status",
			description: "Xem tr·∫°ng th√°i li√™n k·∫øt v√† auto-claim",
			type: ApplicationCommandOptionType.Subcommand,
		},
	],
	integration_types: [0, 1],
	contexts: [0, 1],
};

/**
 * @param { object } command - object command
 * @param { import ("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import('../../lang/vi.js') } command.lang - language
 */
module.exports.execute = async ({ interaction, lang }) => {
	const db = useHooks.get("db");
	if (!db || !db.ZiUser) {
		return interaction.reply({ content: "L·ªói DB: kh√¥ng th·ªÉ k·∫øt n·ªëi database.", ephemeral: true });
	}

	const sub = interaction.options.getSubcommand();

	if (sub === "bind") {
		const account_id_v2 = interaction.options.getString("account_id_v2");
		const account_mid_v2 = interaction.options.getString("account_mid_v2");
		const cookie_token_v2 = interaction.options.getString("cookie_token_v2");

		// Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t·ª´ng option
		const accountIdValid = account_id_v2 && account_id_v2.length >= 5;
		const ltmidValid = account_mid_v2 && account_mid_v2.length >= 10;
		const accountMidValid = account_mid_v2 && account_mid_v2.length >= 10;
		const cookieTokenValid = cookie_token_v2 && cookie_token_v2.length >= 10;

		// N·∫øu ltuid ho·∫∑c ltoken kh√¥ng h·ª£p l·ªá (b·∫Øt bu·ªôc)
		if (!ltmidValid || !accountMidValid || !accountIdValid || !cookieTokenValid) {
			// T·∫°o embed h∆∞·ªõng d·∫´n chi ti·∫øt
			const embed = new EmbedBuilder()
				.setTitle(lang?.Genshin?.cookieGuideTitle || "üç™ H∆∞·ªõng d·∫´n l·∫•y Cookie HoYoLAB")
				.setColor("Red")
				.setDescription(
					lang?.Genshin?.cookieGuideDescription ||
						"Cookie HoYoLAB l√† th√¥ng tin x√°c th·ª±c c·∫ßn thi·∫øt ƒë·ªÉ bot c√≥ th·ªÉ t·ª± ƒë·ªông nh·∫≠n daily check-in cho b·∫°n trong game Genshin Impact.",
				)
				.addFields(
					{
						name: "üìã C√°c b∆∞·ªõc l·∫•y Cookie:",
						value: [
							lang?.Genshin?.cookieSteps?.step1 || "**B∆∞·ªõc 1:** Truy c·∫≠p https://www.hoyolab.com/ v√† ƒëƒÉng nh·∫≠p",
							lang?.Genshin?.cookieSteps?.step2 || "**B∆∞·ªõc 2:** Nh·∫•n `F12` ƒë·ªÉ m·ªü Developer Tools",
							lang?.Genshin?.cookieSteps?.step3 ||
								"**B∆∞·ªõc 3:** V√†o tab **Application** ‚Üí **Cookies** ‚Üí **https://www.hoyolab.com**",
							lang?.Genshin?.cookieSteps?.step4 || "**B∆∞·ªõc 4:** Copy c√°c cookie: `ltuid`, `ltoken`, `cookie_token`",
							lang?.Genshin?.cookieSteps?.step5 ||
								"**B∆∞·ªõc 5:** Format: `ltuid=123456789; ltoken=abcdef123456; cookie_token=xyz789`",
						].join("\n"),
						inline: false,
					},
					{
						name: lang?.Genshin?.cookieImportant || "‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**",
						value:
							lang?.Genshin?.cookieWarning ||
							"‚Ä¢ KH√îNG BAO GI·ªú chia s·∫ª cookie v·ªõi ng∆∞·ªùi kh√°c\n‚Ä¢ Cookie c√≥ th·ªÉ h·∫øt h·∫°n v√† c·∫ßn c·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥\n‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng cookie t·ª´ t√†i kho·∫£n c·ªßa ch√≠nh b·∫°n",
						inline: false,
					},
				);

			embed
				.addFields(
					{
						name: lang?.Genshin?.cookieExample || "**V√≠ d·ª• Cookie h·ª£p l·ªá:**",
						value:
							lang?.Genshin?.cookieExample ||
							"**V√≠ d·ª• Cookie h·ª£p l·ªá:**\n```\naccount_id_v2: 123456789\ncookie_token_v2: v2_abcdef1234567890abcdef1234567890abcdef12\ncookie_token_v2: v2_xyz7890123456789xyz7890123456789xyz789\n```",
						inline: false,
					},
					{
						name: lang?.Genshin?.cookieFixSteps || "**C√°ch kh·∫Øc ph·ª•c:**",
						value:
							lang?.Genshin?.cookieFixSteps ||
							"1. L·∫•y l·∫°i cookie t·ª´ HoYoLAB theo h∆∞·ªõng d·∫´n tr√™n\n2. Copy ƒë·∫ßy ƒë·ªß cookie (bao g·ªìm c·∫£ `account_id_v2` v√† `ltoken_v2`)\n3. Nh·∫≠p t·ª´ng gi√° tr·ªã v√†o option t∆∞∆°ng ·ª©ng trong l·ªánh `/genshin bind`",
						inline: false,
					},
				)
				.setFooter({ text: lang?.Genshin?.cookieFooter || "N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ, h√£y li√™n h·ªá admin server ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£." })
				.setTimestamp();

			return interaction.reply({ embeds: [embed], ephemeral: true });
		}

		// T·∫°o cookie string t·ª´ c√°c options
		const cookieParts = [];
		cookieParts.push(`ltuid_v2=${account_id_v2}`);
		cookieParts.push(`account_id_v2=${account_id_v2}`);
		cookieParts.push(`ltmid_v2=${account_mid_v2}`);
		cookieParts.push(`account_mid_v2=${account_mid_v2}`);

		cookieParts.push(`ltoken_v2=${cookie_token_v2}`);
		cookieParts.push(`cookie_token_v2=${cookie_token_v2}`);

		const finalCookie = cookieParts.join("; ");

		await db.ZiUser.findOneAndUpdate({ userID: interaction.user.id }, { $set: { hoyoCookie: finalCookie } }, { upsert: true });

		const embed = new EmbedBuilder()
			.setTitle("Li√™n k·∫øt HoYoLAB th√†nh c√¥ng")
			.setColor("Green")
			.setDescription(
				"Cookie ƒë√£ ƒë∆∞·ª£c l∆∞u b·∫£o m·∫≠t trong DB. B·∫°n c√≥ th·ªÉ d√πng `/genshin claim` ho·∫∑c b·∫≠t auto b·∫±ng `/genshin auto enabled:true`.",
			)
			.setFooter({ text: "L∆∞u √Ω: Kh√¥ng chia s·∫ª cookie cho ai kh√°c." });

		return interaction.reply({ embeds: [embed], ephemeral: true });
	}

	if (sub === "claim") {
		await interaction.deferReply({ ephemeral: true });
		const user = await db.ZiUser.findOne({ userID: interaction.user.id });
		const cookie = user?.hoyoCookie;
		if (!cookie) {
			return interaction.editReply({ content: "B·∫°n ch∆∞a li√™n k·∫øt cookie. D√πng `/genshin bind` tr∆∞·ªõc.", ephemeral: true });
		}

		const result = await claimGenshinDaily(cookie);
		const embed = new EmbedBuilder().setColor(
			result.status === "claimed" ? "Green"
			: result.status === "already" ? "Yellow"
			: "Red",
		);

		if (result.status === "claimed") {
			await db.ZiUser.findOneAndUpdate(
				{ userID: interaction.user.id },
				{ $set: { lastGenshinClaim: new Date() } },
				{ upsert: true },
			);
			embed
				.setTitle("ƒê√£ nh·∫≠n daily th√†nh c√¥ng!")
				.setDescription(result.message)
				.addFields(
					result.rewardName ? { name: "Ph·∫ßn th∆∞·ªüng h√¥m nay", value: result.rewardName, inline: true } : {},
					result.totalDays ? { name: "T·ªïng ng√†y ƒë√£ nh·∫≠n", value: String(result.totalDays), inline: true } : {},
				)
				.setFooter({ text: "Ngu·ªìn: HoYoLAB" });
		} else if (result.status === "already") {
			embed
				.setTitle("H√¥m nay ƒë√£ nh·∫≠n r·ªìi")
				.setDescription(result.message)
				.addFields(
					result.rewardName ? { name: "Ph·∫ßn th∆∞·ªüng h√¥m nay", value: result.rewardName, inline: true } : {},
					result.totalDays ? { name: "T·ªïng ng√†y ƒë√£ nh·∫≠n", value: String(result.totalDays), inline: true } : {},
				);
		} else {
			// Ki·ªÉm tra n·∫øu l·ªói l√† "Not logged in"
			if (result.message && result.message.toLowerCase().includes("not logged in")) {
				const errorEmbed = new EmbedBuilder()
					.setTitle(lang?.Genshin?.notLoggedInTitle || "üîê Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá")
					.setColor("Red")
					.setDescription(
						lang?.Genshin?.notLoggedInDescription ||
							"Cookie HoYoLAB c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. B·∫°n c·∫ßn c·∫≠p nh·∫≠t cookie m·ªõi.",
					)
					.addFields(
						{
							name: "üìã C√°c b∆∞·ªõc l·∫•y Cookie:",
							value: [
								lang?.Genshin?.cookieSteps?.step1 || "**B∆∞·ªõc 1:** Truy c·∫≠p https://www.hoyolab.com/ v√† ƒëƒÉng nh·∫≠p",
								lang?.Genshin?.cookieSteps?.step2 || "**B∆∞·ªõc 2:** Nh·∫•n `F12` ƒë·ªÉ m·ªü Developer Tools",
								lang?.Genshin?.cookieSteps?.step3 ||
									"**B∆∞·ªõc 3:** V√†o tab **Application** ‚Üí **Cookies** ‚Üí **https://www.hoyolab.com**",
								lang?.Genshin?.cookieSteps?.step4 || "**B∆∞·ªõc 4:** Copy c√°c cookie: `ltuid`, `ltoken`, `cookie_token`",
								lang?.Genshin?.cookieSteps?.step5 || "**B∆∞·ªõc 5:** Nh·∫≠p t·ª´ng gi√° tr·ªã ri√™ng bi·ªát v√†o c√°c option t∆∞∆°ng ·ª©ng",
							].join("\n"),
							inline: false,
						},
						{
							name: lang?.Genshin?.notLoggedInReasons || "**Nguy√™n nh√¢n c√≥ th·ªÉ:**",
							value:
								lang?.Genshin?.notLoggedInReasons ||
								"‚Ä¢ Cookie ƒë√£ h·∫øt h·∫°n (th∆∞·ªùng sau 30 ng√†y)\n‚Ä¢ T√†i kho·∫£n HoYoLAB ƒë√£ ƒëƒÉng xu·∫•t\n‚Ä¢ Cookie b·ªã thay ƒë·ªïi do ƒëƒÉng nh·∫≠p l·∫°i\n‚Ä¢ T√†i kho·∫£n b·ªã kh√≥a t·∫°m th·ªùi",
							inline: false,
						},
						{
							name: lang?.Genshin?.notLoggedInFixSteps || "**C√°ch kh·∫Øc ph·ª•c:**",
							value:
								lang?.Genshin?.notLoggedInFixSteps ||
								"1. Truy c·∫≠p https://www.hoyolab.com/ v√† ƒëƒÉng nh·∫≠p l·∫°i\n2. L·∫•y cookie m·ªõi theo h∆∞·ªõng d·∫´n tr√™n\n3. D√πng `/genshin bind` ƒë·ªÉ c·∫≠p nh·∫≠t cookie m·ªõi\n4. Th·ª≠ `/genshin claim` l·∫°i",
							inline: false,
						},
					)
					.setFooter({ text: lang?.Genshin?.cookieFooter || "N·∫øu v·∫´n g·∫∑p v·∫•n ƒë·ªÅ, h√£y li√™n h·ªá admin server ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£." })
					.setTimestamp();

				return interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
			}

			embed.setTitle("Nh·∫≠n daily th·∫•t b·∫°i").setDescription(result.message || "C√≥ l·ªói x·∫£y ra.");
		}

		return interaction.editReply({ embeds: [embed], ephemeral: true });
	}

	if (sub === "auto") {
		const enabled = interaction.options.getBoolean("enabled");
		await db.ZiUser.findOneAndUpdate(
			{ userID: interaction.user.id },
			{ $set: { genshinAutoClaim: !!enabled } },
			{ upsert: true },
		);
		return interaction.reply({ content: `Auto-claim: ${enabled ? "B·∫¨T" : "T·∫ÆT"}.`, ephemeral: true });
	}

	if (sub === "status") {
		const user = await db.ZiUser.findOne({ userID: interaction.user.id });
		const linked = !!user?.hoyoCookie;
		const auto = !!user?.genshinAutoClaim;
		const last = user?.lastGenshinClaim ? `<t:${Math.floor(new Date(user.lastGenshinClaim).getTime() / 1000)}:R>` : "Ch∆∞a c√≥";

		const embed = new EmbedBuilder()
			.setTitle("Genshin Daily Status")
			.setColor("Blue")
			.addFields(
				{ name: "Li√™n k·∫øt", value: linked ? "ƒê√É LI√äN K·∫æT" : "CH∆ØA", inline: true },
				{ name: "Auto-claim", value: auto ? "B·∫¨T" : "T·∫ÆT", inline: true },
				{ name: "L·∫ßn nh·∫≠n g·∫ßn nh·∫•t", value: last, inline: true },
			);

		return interaction.reply({ embeds: [embed], ephemeral: true });
	}

	// Fallback
	try {
		return interaction.reply({ content: "Subcommand kh√¥ng h·ª£p l·ªá.", ephemeral: true });
	} catch (e) {
		useHooks.get("logger").error("genshin cmd error:", e);
	}
};
